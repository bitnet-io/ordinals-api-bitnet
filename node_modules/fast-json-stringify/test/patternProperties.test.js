'use strict'

const test = require('tap').test
const build = require('..')

test('patternProperties', (t) => {
  t.plan(1)
  const stringify = build({
    title: 'patternProperties',
    type: 'object',
    properties: {
      str: {
        type: 'string'
      }
    },
    patternProperties: {
      bar: {
        type: 'string'
      }
    }
  })

  const obj = { str: 'test', bar: 42, obar: true, barf: 'string', objbar: { a: true }, notMe: false }
  t.equal(stringify(obj), '{"str":"test","bar":"42","obar":"true","barf":"string","objbar":"[object Object]"}')
})

test('patternProperties should not change properties', (t) => {
  t.plan(1)
  const stringify = build({
    title: 'patternProperties should not change properties',
    type: 'object',
    properties: {
      bar: {
        type: 'string'
      }
    },
    patternProperties: {
      bar: {
        type: 'number'
      }
    }
  })

  const obj = { bar: '42', obar: 42 }
  t.equal(stringify(obj), '{"bar":"42","obar":42}')
})

test('patternProperties - string coerce', (t) => {
  t.plan(1)
  const stringify = build({
    title: 'check string coerce',
    type: 'object',
    properties: {},
    patternProperties: {
      bar: {
        type: 'string'
      }
    }
  })

  const obj = { bar: true, obar: 42, arrbar: ['array', 'test'], objbar: { a: 'world' } }
  t.equal(stringify(obj), '{"bar":"true","obar":"42","arrbar":"array,test","objbar":"[object Object]"}')
})

test('patternProperties - number coerce', (t) => {
  t.plan(2)
  const stringify = build({
    title: 'check number coerce',
    type: 'object',
    properties: {},
    patternProperties: {
      bar: {
        type: 'number'
      }
    }
  })

  const coercibleValues = { bar: true, obar: '42' }
  t.equal(stringify(coercibleValues), '{"bar":1,"obar":42}')

  const incoercibleValues = { xbar: 'string', arrbar: [1, 2], objbar: { num: 42 } }
  try {
    stringify(incoercibleValues)
    t.fail('should throw an error')
  } catch (err) {
    t.ok(err)
  }
})

test('patternProperties - boolean coerce', (t) => {
  t.plan(1)
  const stringify = build({
    title: 'check boolean coerce',
    type: 'object',
    properties: {},
    patternProperties: {
      bar: {
        type: 'boolean'
      }
    }
  })

  const obj = { bar: 'true', obar: 0, arrbar: [1, 2], objbar: { a: true } }
  t.equal(stringify(obj), '{"bar":true,"obar":false,"arrbar":true,"objbar":true}')
})

test('patternProperties - object coerce', (t) => {
  t.plan(1)
  const stringify = build({
    title: 'check object coerce',
    type: 'object',
    properties: {},
    patternProperties: {
      bar: {
        type: 'object',
        properties: {
          answer: {
            type: 'number'
          }
        }
      }
    }
  })

  const obj = { objbar: { answer: 42 } }
  t.equal(stringify(obj), '{"objbar":{"answer":42}}')
})

test('patternProperties - array coerce', (t) => {
  t.plan(2)
  const stringify = build({
    title: 'check array coerce',
    type: 'object',
    properties: {},
    patternProperties: {
      bar: {
        type: 'array',
        items: {
          type: 'string'
        }
      }
    }
  })

  const coercibleValues = { arrbar: [1, 2] }
  t.equal(stringify(coercibleValues), '{"arrbar":["1","2"]}')

  const incoercibleValues = { bar: 'true', obar: 0, objbar: { tyrion: 'lannister' } }
  t.throws(() => stringify(incoercibleValues))
})

test('patternProperties - fail on invalid regex, handled by ajv', (t) => {
  t.plan(1)

  t.throws(() => build({
    title: 'check array coerce',
    type: 'object',
    properties: {},
    patternProperties: {
      'bar/\\': {
        type: 'array',
        items: {
          type: 'string'
        }
      }
    }
  }), new Error('schema is invalid: data/patternProperties must match format "regex"'))
})
