"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerShutdownConfig = void 0;
const time_1 = require("../helpers/time");
const logger_1 = require("../logger");
const SHUTDOWN_SIGNALS = ['SIGINT', 'SIGTERM'];
const shutdownConfigs = [];
let isShuttingDown = false;
async function startShutdown() {
    if (isShuttingDown) {
        return;
    }
    isShuttingDown = true;
    const timeoutMs = parseInt(process.env['STACKS_SHUTDOWN_FORCE_KILL_TIMEOUT'] ?? '60') * 1000;
    let errorEncountered = false;
    for (const config of shutdownConfigs) {
        try {
            logger_1.logger.info(`Closing ${config.name}...`);
            const gracefulShutdown = await (0, time_1.resolveOrTimeout)(Promise.resolve(config.handler()), timeoutMs, !config.forceKillable, () => logger_1.logger.error(`${config.name} is taking longer than expected to shutdown, possibly hanging indefinitely`));
            if (!gracefulShutdown) {
                if (config.forceKillable && config.forceKillHandler) {
                    await Promise.resolve(config.forceKillHandler());
                }
                logger_1.logger.error(`${config.name} was force killed after taking longer than ${timeoutMs}ms to shutdown`);
            }
            else {
                logger_1.logger.info(`${config.name} closed`);
            }
        }
        catch (error) {
            errorEncountered = true;
            logger_1.logger.error(error, `Error running ${config.name} shutdown handler`);
        }
    }
    if (errorEncountered) {
        process.exit(1);
    }
    else {
        logger_1.logger.info('App shutdown successful.');
        process.exit();
    }
}
let shutdownSignalsRegistered = false;
function registerShutdownSignals() {
    if (shutdownSignalsRegistered) {
        return;
    }
    shutdownSignalsRegistered = true;
    SHUTDOWN_SIGNALS.forEach(sig => {
        process.once(sig, () => {
            logger_1.logger.info(`Shutting down... received signal: ${sig}`);
            void startShutdown();
        });
    });
    process.once('unhandledRejection', error => {
        logger_1.logger.error(error, 'unhandledRejection');
        logger_1.logger.error('Shutting down... received unhandledRejection.');
        void startShutdown();
    });
    process.once('uncaughtException', error => {
        logger_1.logger.error(error, 'uncaughtException');
        logger_1.logger.error('Shutting down... received uncaughtException.');
        void startShutdown();
    });
    process.once('beforeExit', () => {
        logger_1.logger.error('Shutting down... received beforeExit.');
        void startShutdown();
    });
}
function registerShutdownConfig(...configs) {
    registerShutdownSignals();
    shutdownConfigs.push(...configs);
}
exports.registerShutdownConfig = registerShutdownConfig;
//# sourceMappingURL=index.js.map