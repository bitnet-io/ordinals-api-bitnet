"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainhookEventObserver = void 0;
const server_1 = require("./server");
/**
 * Local web server that registers predicates and receives events from a Chainhook node. It handles
 * retry logic and node availability transparently and provides a callback for individual event
 * processing.
 *
 * Predicates registered here do not accept a `then_that` entry as this will be configured
 * automatically to redirect events to this server.
 *
 * Events relayed by this component will include the original predicate's UUID so actions can be
 * taken for each relevant predicate.
 */
class ChainhookEventObserver {
    constructor(serverOpts, chainhookOpts) {
        this.serverOpts = serverOpts;
        this.chainhookOpts = chainhookOpts;
    }
    /**
     * Start the Chainhook event server.
     * @param predicates - Predicates to register
     * @param callback - Function to handle every Chainhook event payload sent by the node
     */
    async start(predicates, callback) {
        if (this.fastify)
            return;
        this.fastify = await (0, server_1.buildServer)(this.serverOpts, this.chainhookOpts, predicates, callback);
        await this.fastify.listen({ host: this.serverOpts.hostname, port: this.serverOpts.port });
    }
    /**
     * Stop the Chainhook event server gracefully.
     */
    async close() {
        await this.fastify?.close();
        this.fastify = undefined;
    }
}
exports.ChainhookEventObserver = ChainhookEventObserver;
__exportStar(require("./schemas/bitcoin/if_this"), exports);
__exportStar(require("./schemas/bitcoin/payload"), exports);
__exportStar(require("./schemas/common"), exports);
__exportStar(require("./schemas/payload"), exports);
__exportStar(require("./schemas/predicate"), exports);
__exportStar(require("./schemas/stacks/if_this"), exports);
__exportStar(require("./schemas/stacks/payload"), exports);
__exportStar(require("./schemas/stacks/tx_events"), exports);
__exportStar(require("./schemas/stacks/tx_kind"), exports);
__exportStar(require("./server"), exports);
//# sourceMappingURL=index.js.map