/// <reference types="node" />
import { Static, TypeBoxTypeProvider } from '@fastify/type-provider-typebox';
import { FastifyInstance } from 'fastify';
import { Server } from 'http';
import { Payload } from './schemas/payload';
/** Function type for a Chainhook event callback */
export type OnEventCallback = (uuid: string, payload: Payload) => Promise<void>;
declare const ServerOptionsSchema: import("@sinclair/typebox").TObject<{
    hostname: import("@sinclair/typebox").TString;
    port: import("@sinclair/typebox").TInteger;
    auth_token: import("@sinclair/typebox").TString;
    external_base_url: import("@sinclair/typebox").TString;
    /** Wait for the chainhook node to be available before submitting predicates */
    wait_for_chainhook_node: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    /** Validate the JSON schema of received chainhook payloads and report errors when invalid */
    validate_chainhook_payloads: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    /** Size limit for received chainhook payloads (default 40MB) */
    body_limit: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    /** Node type: `chainhook` or `ordhook` */
    node_type: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"chainhook">, import("@sinclair/typebox").TLiteral<"ordhook">]>>;
}>;
/** Local event server connection and authentication options */
export type ServerOptions = Static<typeof ServerOptionsSchema>;
declare const ChainhookNodeOptionsSchema: import("@sinclair/typebox").TObject<{
    base_url: import("@sinclair/typebox").TString;
}>;
/** Chainhook node connection options */
export type ChainhookNodeOptions = Static<typeof ChainhookNodeOptionsSchema>;
/**
 * Throw this error when processing a Chainhook Payload if you believe it is a bad request. This
 * will cause the server to return a `400` status code.
 */
export declare class BadPayloadRequestError extends Error {
    constructor(message: string);
}
declare const ServerPredicateSchema: import("@sinclair/typebox").TObject<{
    uuid: import("@sinclair/typebox").TString;
    name: import("@sinclair/typebox").TString;
    version: import("@sinclair/typebox").TInteger;
    chain: import("@sinclair/typebox").TString;
    networks: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
        mainnet: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
            start_block: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            end_block: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            expire_after_occurrence: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            if_this: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"txid">;
                equals: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                op_return: import("@sinclair/typebox").TObject<{
                    starts_with: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                op_return: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                op_return: import("@sinclair/typebox").TObject<{
                    ends_with: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                p2pkh: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                p2sh: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                p2wpkh: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                p2wsh: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stacks_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"block_committed">;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stacks_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"leader_registered">;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stacks_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"stx_transfered">;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stacks_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"stx_locked">;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"ordinals_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"inscription_feed">;
            }>]>;
            include_proof: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
            include_inputs: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
            include_outputs: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
            include_witness: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
        }>, import("@sinclair/typebox").TObject<{
            start_block: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            end_block: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            expire_after_occurrence: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            decode_clarity_values: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
            if_this: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"txid">;
                equals: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"block_height">;
                higher_than: import("@sinclair/typebox").TInteger;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"ft_event">;
                asset_identifier: import("@sinclair/typebox").TString;
                actions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"mint">, import("@sinclair/typebox").TLiteral<"transfer">, import("@sinclair/typebox").TLiteral<"burn">]>>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"nft_event">;
                asset_identifier: import("@sinclair/typebox").TString;
                actions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"mint">, import("@sinclair/typebox").TLiteral<"transfer">, import("@sinclair/typebox").TLiteral<"burn">]>>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stx_event">;
                actions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"mint">, import("@sinclair/typebox").TLiteral<"transfer">, import("@sinclair/typebox").TLiteral<"burn">, import("@sinclair/typebox").TLiteral<"lock">]>>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"print_event">;
                contract_identifier: import("@sinclair/typebox").TString;
                contains: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"contract_call">;
                contract_identifier: import("@sinclair/typebox").TString; /** Chainhook node connection options */
                method: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"contract_deployment">;
                deployer: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"contract_deployment">;
                implement_trait: import("@sinclair/typebox").TString;
            }>]>;
        }>]>;
    }>, import("@sinclair/typebox").TObject<{
        testnet: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
            start_block: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            end_block: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            expire_after_occurrence: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            if_this: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"txid">;
                equals: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                op_return: import("@sinclair/typebox").TObject<{
                    starts_with: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                op_return: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                op_return: import("@sinclair/typebox").TObject<{
                    ends_with: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                p2pkh: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                p2sh: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                p2wpkh: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"outputs">;
                p2wsh: import("@sinclair/typebox").TObject<{
                    equals: import("@sinclair/typebox").TString;
                }>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stacks_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"block_committed">;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stacks_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"leader_registered">;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stacks_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"stx_transfered">;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stacks_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"stx_locked">;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"ordinals_protocol">;
                operation: import("@sinclair/typebox").TLiteral<"inscription_feed">;
            }>]>;
            include_proof: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
            include_inputs: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
            include_outputs: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
            include_witness: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
        }>, import("@sinclair/typebox").TObject<{
            start_block: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            end_block: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            expire_after_occurrence: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
            decode_clarity_values: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
            if_this: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"txid">;
                equals: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"block_height">;
                higher_than: import("@sinclair/typebox").TInteger;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"ft_event">;
                asset_identifier: import("@sinclair/typebox").TString;
                actions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"mint">, import("@sinclair/typebox").TLiteral<"transfer">, import("@sinclair/typebox").TLiteral<"burn">]>>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"nft_event">;
                asset_identifier: import("@sinclair/typebox").TString;
                actions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"mint">, import("@sinclair/typebox").TLiteral<"transfer">, import("@sinclair/typebox").TLiteral<"burn">]>>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"stx_event">;
                actions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"mint">, import("@sinclair/typebox").TLiteral<"transfer">, import("@sinclair/typebox").TLiteral<"burn">, import("@sinclair/typebox").TLiteral<"lock">]>>;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"print_event">;
                contract_identifier: import("@sinclair/typebox").TString;
                contains: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"contract_call">;
                contract_identifier: import("@sinclair/typebox").TString; /** Chainhook node connection options */
                method: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"contract_deployment">;
                deployer: import("@sinclair/typebox").TString;
            }>, import("@sinclair/typebox").TObject<{
                scope: import("@sinclair/typebox").TLiteral<"contract_deployment">;
                implement_trait: import("@sinclair/typebox").TString;
            }>]>;
        }>]>;
    }>]>;
}>;
/** Chainhook predicates registerable by the local event server */
export type ServerPredicate = Static<typeof ServerPredicateSchema>;
/**
 * Build the Chainhook Fastify event server.
 * @param serverOpts - Server options
 * @param chainhookOpts - Chainhook node options
 * @param predicates - Predicates to register
 * @param callback - Event callback function
 * @returns Fastify instance
 */
export declare function buildServer(serverOpts: ServerOptions, chainhookOpts: ChainhookNodeOptions, predicates: ServerPredicate[], callback: OnEventCallback): Promise<FastifyInstance<Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>, import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>, import("fastify").FastifyBaseLogger, TypeBoxTypeProvider>>;
export {};
