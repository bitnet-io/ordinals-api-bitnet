"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PredicateSchema = exports.PredicateHeaderSchema = exports.ThenThatSchema = exports.ThenThatHttpPostSchema = exports.ThenThatFileAppendSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const if_this_1 = require("./bitcoin/if_this");
const if_this_2 = require("./stacks/if_this");
exports.ThenThatFileAppendSchema = typebox_1.Type.Object({
    file_append: typebox_1.Type.Object({
        path: typebox_1.Type.String(),
    }),
});
exports.ThenThatHttpPostSchema = typebox_1.Type.Object({
    http_post: typebox_1.Type.Object({
        url: typebox_1.Type.String({ format: 'uri' }),
        authorization_header: typebox_1.Type.String(),
    }),
});
exports.ThenThatSchema = typebox_1.Type.Union([exports.ThenThatFileAppendSchema, exports.ThenThatHttpPostSchema]);
exports.PredicateHeaderSchema = typebox_1.Type.Object({
    uuid: typebox_1.Type.String({ format: 'uuid' }),
    name: typebox_1.Type.String(),
    version: typebox_1.Type.Integer(),
    chain: typebox_1.Type.String(),
});
exports.PredicateSchema = typebox_1.Type.Composite([
    exports.PredicateHeaderSchema,
    typebox_1.Type.Object({
        networks: typebox_1.Type.Union([
            typebox_1.Type.Object({
                mainnet: typebox_1.Type.Union([if_this_1.BitcoinIfThisThenThatSchema, if_this_2.StacksIfThisThenThatSchema]),
            }),
            typebox_1.Type.Object({
                testnet: typebox_1.Type.Union([if_this_1.BitcoinIfThisThenThatSchema, if_this_2.StacksIfThisThenThatSchema]),
            }),
        ]),
    }),
]);
//# sourceMappingURL=predicate.js.map