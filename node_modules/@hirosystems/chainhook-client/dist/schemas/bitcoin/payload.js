"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitcoinEventSchema = exports.BitcoinTransactionSchema = exports.BitcoinTransactionMetadataSchema = exports.BitcoinOutputSchema = exports.BitcoinOrdinalOperationSchema = exports.BitcoinInscriptionTransferredSchema = exports.BitcoinInscriptionRevealedSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const common_1 = require("../common");
exports.BitcoinInscriptionRevealedSchema = typebox_1.Type.Object({
    content_bytes: typebox_1.Type.String(),
    content_type: typebox_1.Type.String(),
    content_length: typebox_1.Type.Integer(),
    inscription_number: typebox_1.Type.Object({
        jubilee: typebox_1.Type.Integer(),
        classic: typebox_1.Type.Integer(),
    }),
    inscription_fee: typebox_1.Type.Integer(),
    inscription_id: typebox_1.Type.String(),
    inscription_input_index: typebox_1.Type.Integer(),
    inscription_output_value: typebox_1.Type.Integer(),
    inscriber_address: (0, common_1.Nullable)(typebox_1.Type.String()),
    ordinal_number: typebox_1.Type.Integer(),
    ordinal_block_height: typebox_1.Type.Integer(),
    ordinal_offset: typebox_1.Type.Integer(),
    satpoint_post_inscription: typebox_1.Type.String(),
    transfers_pre_inscription: typebox_1.Type.Integer(),
    curse_type: (0, common_1.Nullable)(typebox_1.Type.Any()),
    tx_index: typebox_1.Type.Integer(),
});
exports.BitcoinInscriptionTransferredSchema = typebox_1.Type.Object({
    destination: typebox_1.Type.Object({
        type: typebox_1.Type.Union([
            typebox_1.Type.Literal('transferred'),
            typebox_1.Type.Literal('spent_in_fees'),
            typebox_1.Type.Literal('burnt'),
        ]),
        value: typebox_1.Type.Optional(typebox_1.Type.String()),
    }),
    ordinal_number: typebox_1.Type.Integer(),
    satpoint_pre_transfer: typebox_1.Type.String(),
    satpoint_post_transfer: typebox_1.Type.String(),
    post_transfer_output_value: (0, common_1.Nullable)(typebox_1.Type.Integer()),
    tx_index: typebox_1.Type.Integer(),
});
exports.BitcoinOrdinalOperationSchema = typebox_1.Type.Object({
    inscription_revealed: typebox_1.Type.Optional(exports.BitcoinInscriptionRevealedSchema),
    inscription_transferred: typebox_1.Type.Optional(exports.BitcoinInscriptionTransferredSchema),
});
exports.BitcoinOutputSchema = typebox_1.Type.Object({
    script_pubkey: typebox_1.Type.String(),
    value: typebox_1.Type.Integer(),
});
exports.BitcoinTransactionMetadataSchema = typebox_1.Type.Object({
    ordinal_operations: typebox_1.Type.Array(exports.BitcoinOrdinalOperationSchema),
    outputs: typebox_1.Type.Optional(typebox_1.Type.Array(exports.BitcoinOutputSchema)),
    proof: (0, common_1.Nullable)(typebox_1.Type.String()),
});
exports.BitcoinTransactionSchema = typebox_1.Type.Object({
    transaction_identifier: common_1.TransactionIdentifierSchema,
    operations: typebox_1.Type.Array(common_1.RosettaOperationSchema),
    metadata: exports.BitcoinTransactionMetadataSchema,
});
exports.BitcoinEventSchema = typebox_1.Type.Object({
    block_identifier: common_1.BlockIdentifierSchema,
    parent_block_identifier: common_1.BlockIdentifierSchema,
    timestamp: typebox_1.Type.Integer(),
    transactions: typebox_1.Type.Array(exports.BitcoinTransactionSchema),
    metadata: typebox_1.Type.Any(),
});
//# sourceMappingURL=payload.js.map