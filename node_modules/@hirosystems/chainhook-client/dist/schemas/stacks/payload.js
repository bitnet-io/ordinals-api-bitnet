"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StacksEventSchema = exports.StacksEventMetadataSchema = exports.StacksTransactionMetadataSchema = exports.StacksTransactionPositionSchema = exports.StacksTransactionReceiptSchema = exports.StacksExecutionCostSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const common_1 = require("../common");
const tx_events_1 = require("./tx_events");
const tx_kind_1 = require("./tx_kind");
exports.StacksExecutionCostSchema = typebox_1.Type.Optional(typebox_1.Type.Object({
    read_count: typebox_1.Type.Integer(),
    read_length: typebox_1.Type.Integer(),
    runtime: typebox_1.Type.Integer(),
    write_count: typebox_1.Type.Integer(),
    write_length: typebox_1.Type.Integer(),
}));
exports.StacksTransactionReceiptSchema = typebox_1.Type.Object({
    contract_calls_stack: typebox_1.Type.Array(typebox_1.Type.String()),
    events: typebox_1.Type.Array(tx_events_1.StacksTransactionEventSchema),
    mutated_assets_radius: typebox_1.Type.Array(typebox_1.Type.String()),
    mutated_contracts_radius: typebox_1.Type.Array(typebox_1.Type.String()),
});
exports.StacksTransactionPositionSchema = typebox_1.Type.Object({
    index: typebox_1.Type.Integer(),
    micro_block_identifier: typebox_1.Type.Optional(common_1.BlockIdentifierSchema),
});
exports.StacksTransactionMetadataSchema = typebox_1.Type.Object({
    description: typebox_1.Type.String(),
    execution_cost: exports.StacksExecutionCostSchema,
    fee: typebox_1.Type.Integer(),
    kind: tx_kind_1.StacksTransactionKindSchema,
    nonce: typebox_1.Type.Integer(),
    position: exports.StacksTransactionPositionSchema,
    proof: (0, common_1.Nullable)(typebox_1.Type.String()),
    raw_tx: typebox_1.Type.String(),
    receipt: exports.StacksTransactionReceiptSchema,
    result: typebox_1.Type.String(),
    sender: typebox_1.Type.String(),
    sponsor: typebox_1.Type.Optional(typebox_1.Type.String()),
    success: typebox_1.Type.Boolean(),
});
const StacksTransactionSchema = typebox_1.Type.Object({
    transaction_identifier: common_1.TransactionIdentifierSchema,
    operations: typebox_1.Type.Array(common_1.RosettaOperationSchema),
    metadata: exports.StacksTransactionMetadataSchema,
});
exports.StacksEventMetadataSchema = typebox_1.Type.Object({
    bitcoin_anchor_block_identifier: common_1.BlockIdentifierSchema,
    confirm_microblock_identifier: common_1.BlockIdentifierSchema,
    pox_cycle_index: typebox_1.Type.Integer(),
    pox_cycle_length: typebox_1.Type.Integer(),
    pox_cycle_position: typebox_1.Type.Integer(),
    stacks_block_hash: typebox_1.Type.String(),
});
exports.StacksEventSchema = typebox_1.Type.Object({
    block_identifier: common_1.BlockIdentifierSchema,
    parent_block_identifier: common_1.BlockIdentifierSchema,
    timestamp: typebox_1.Type.Integer(),
    transactions: typebox_1.Type.Array(StacksTransactionSchema),
    metadata: exports.StacksEventMetadataSchema,
});
//# sourceMappingURL=payload.js.map