"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StacksIfThisThenThatSchema = exports.StacksIfThisSchema = exports.StacksIfThisOptionsSchema = exports.StacksIfThisContractDeploymentTraitSchema = exports.StacksIfThisContractDeploymentSchema = exports.StacksIfThisContractCallSchema = exports.StacksIfThisPrintEventSchema = exports.StacksIfThisStxEventSchema = exports.StacksIfThisNftEventSchema = exports.StacksIfThisFtEventSchema = exports.StacksIfThisBlockHeightHigherThanSchema = exports.StacksIfThisTxIdSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const predicate_1 = require("../predicate");
exports.StacksIfThisTxIdSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('txid'),
    equals: typebox_1.Type.String(),
});
exports.StacksIfThisBlockHeightHigherThanSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('block_height'),
    higher_than: typebox_1.Type.Integer(),
});
exports.StacksIfThisFtEventSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('ft_event'),
    asset_identifier: typebox_1.Type.String(),
    actions: typebox_1.Type.Array(typebox_1.Type.Union([typebox_1.Type.Literal('mint'), typebox_1.Type.Literal('transfer'), typebox_1.Type.Literal('burn')])),
});
exports.StacksIfThisNftEventSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('nft_event'),
    asset_identifier: typebox_1.Type.String(),
    actions: typebox_1.Type.Array(typebox_1.Type.Union([typebox_1.Type.Literal('mint'), typebox_1.Type.Literal('transfer'), typebox_1.Type.Literal('burn')])),
});
exports.StacksIfThisStxEventSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('stx_event'),
    actions: typebox_1.Type.Array(typebox_1.Type.Union([
        typebox_1.Type.Literal('mint'),
        typebox_1.Type.Literal('transfer'),
        typebox_1.Type.Literal('burn'),
        typebox_1.Type.Literal('lock'),
    ])),
});
exports.StacksIfThisPrintEventSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('print_event'),
    contract_identifier: typebox_1.Type.String(),
    contains: typebox_1.Type.String(),
});
exports.StacksIfThisContractCallSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('contract_call'),
    contract_identifier: typebox_1.Type.String(),
    method: typebox_1.Type.String(),
});
exports.StacksIfThisContractDeploymentSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('contract_deployment'),
    deployer: typebox_1.Type.String(),
});
exports.StacksIfThisContractDeploymentTraitSchema = typebox_1.Type.Object({
    scope: typebox_1.Type.Literal('contract_deployment'),
    implement_trait: typebox_1.Type.String(),
});
exports.StacksIfThisOptionsSchema = typebox_1.Type.Object({
    start_block: typebox_1.Type.Optional(typebox_1.Type.Integer()),
    end_block: typebox_1.Type.Optional(typebox_1.Type.Integer()),
    expire_after_occurrence: typebox_1.Type.Optional(typebox_1.Type.Integer()),
    decode_clarity_values: typebox_1.Type.Optional(typebox_1.Type.Boolean()),
});
exports.StacksIfThisSchema = typebox_1.Type.Union([
    exports.StacksIfThisTxIdSchema,
    exports.StacksIfThisBlockHeightHigherThanSchema,
    exports.StacksIfThisFtEventSchema,
    exports.StacksIfThisNftEventSchema,
    exports.StacksIfThisStxEventSchema,
    exports.StacksIfThisPrintEventSchema,
    exports.StacksIfThisContractCallSchema,
    exports.StacksIfThisContractDeploymentSchema,
    exports.StacksIfThisContractDeploymentTraitSchema,
]);
exports.StacksIfThisThenThatSchema = typebox_1.Type.Composite([
    exports.StacksIfThisOptionsSchema,
    typebox_1.Type.Object({
        if_this: exports.StacksIfThisSchema,
        then_that: predicate_1.ThenThatSchema,
    }),
]);
//# sourceMappingURL=if_this.js.map