'use strict';
var tape = require('tape');
var path = require('../');

var backslashRE = /\\/g;

var joinTests =
    // arguments                     result
    [[['.', 'x/b', '..', '/b/c.js'], 'x/b/c.js'],
     [[], '.'],
     [['/.', 'x/b', '..', '/b/c.js'], '/x/b/c.js'],
     [['/bar', '../../../bar'], '/bar'],
     [['bar', '../../../bar'], '../../bar'],
     [['bar/', '../../../bar'], '../../bar'],
     [['bar/x', '../../../bar'], '../bar'],
     [['bar/x', './bar'], 'bar/x/bar'],
     [['bar/x/', './bar'], 'bar/x/bar'],
     [['bar/x/', '.', 'bar'], 'bar/x/bar'],
     [['./'], './'],
     [['.', './'], './'],
     [['.', '.', '.'], '.'],
     [['.', './', '.'], '.'],
     [['.', '/./', '.'], '.'],
     [['.', '/////./', '.'], '.'],
     [['.'], '.'],
     [['', '.'], '.'],
     [['', 'bar'], 'bar'],
     [['bar', '/bar'], 'bar/bar'],
     [['', '/bar'], '/bar'],
     [['', '', '/bar'], '/bar'],
     [['', '', 'bar'], 'bar'],
     [['bar', ''], 'bar'],
     [['bar/', ''], 'bar/'],
     [['bar', '', '/bar'], 'bar/bar'],
     [['./', '..', '/bar'], '../bar'],
     [['./', '..', '..', '/bar'], '../../bar'],
     [['.', '..', '..', '/bar'], '../../bar'],
     [['', '..', '..', '/bar'], '../../bar'],
     [['/'], '/'],
     [['/', '.'], '/'],
     [['/', '..'], '/'],
     [['/', '..', '..'], '/'],
     [[''], '.'],
     [['', ''], '.'],
     [[' /bar'], ' /bar'],
     [[' ', 'bar'], ' /bar'],
     [[' ', '.'], ' '],
     [[' ', '/'], ' /'],
     [[' ', ''], ' '],
     [['/', 'bar'], '/bar'],
     [['/', '/bar'], '/bar'],
     [['/', '//bar'], '/bar'],
     [['/', '', '/bar'], '/bar'],
     [['', '/', 'bar'], '/bar'],
     [['', '/', '/bar'], '/bar']
    ];

// Windows-specific join tests
var windowsJoinTests =
    [// arguments                     result
      // UNC path expected
      [['//bar/bar'], '\\\\bar\\bar\\'],
      [['\\/bar/bar'], '\\\\bar\\bar\\'],
      [['\\\\bar/bar'], '\\\\bar\\bar\\'],
      // UNC path expected - server and share separate
      [['//bar', 'bar'], '\\\\bar\\bar\\'],
      [['//bar/', 'bar'], '\\\\bar\\bar\\'],
      [['//bar', '/bar'], '\\\\bar\\bar\\'],
      // UNC path expected - questionable
      [['//bar', '', 'bar'], '\\\\bar\\bar\\'],
      [['//bar/', '', 'bar'], '\\\\bar\\bar\\'],
      [['//bar/', '', '/bar'], '\\\\bar\\bar\\'],
      // UNC path expected - even more questionable
      [['', '//bar', 'bar'], '\\\\bar\\bar\\'],
      [['', '//bar/', 'bar'], '\\\\bar\\bar\\'],
      [['', '//bar/', '/bar'], '\\\\bar\\bar\\'],
      // No UNC path expected (no double slash in first component)
      [['\\', 'bar/bar'], '\\bar\\bar'],
      [['\\', '/bar/bar'], '\\bar\\bar'],
      [['', '/', '/bar/bar'], '\\bar\\bar'],
      // No UNC path expected (no non-slashes in first component -
      // questionable)
      [['//', 'bar/bar'], '\\bar\\bar'],
      [['//', '/bar/bar'], '\\bar\\bar'],
      [['\\\\', '/', '/bar/bar'], '\\bar\\bar'],
      [['//'], '/'],
      // No UNC path expected (share name missing - questionable).
      [['//bar'], '\\bar'],
      [['//bar/'], '\\bar\\'],
      [['//bar', '/'], '\\bar\\'],
      [['//bar', '', '/'], '\\bar\\'],
      // No UNC path expected (too many leading slashes - questionable)
      [['///bar/bar'], '\\bar\\bar'],
      [['////bar', 'bar'], '\\bar\\bar'],
      [['\\\\\\/bar/bar'], '\\bar\\bar'],
      // Drive-relative vs drive-absolute paths. This merely describes the
      // status quo, rather than being obviously right
      [['c:'], 'c:.'],
      [['c:.'], 'c:.'],
      [['c:', ''], 'c:.'],
      [['', 'c:'], 'c:.'],
      [['c:.', '/'], 'c:.\\'],
      [['c:.', 'file'], 'c:file'],
      [['c:', '/'], 'c:\\'],
      [['c:', 'file'], 'c:\\file']
    ];

tape('path.posix.join', function (t) {
  joinTests.forEach(function (p) {
    var actual = path.posix.join.apply(null, p[0]);
    t.strictEqual(actual, p[1]);
  });
  t.end();
});

tape('path.win32.join', { skip: true }, function (t) {
  joinTests.forEach(function (p) {
    var actual = path.win32.join.apply(null, p[0]).replace(backslashRE, '/');
    t.strictEqual(actual, p[1]);
  });
  windowsJoinTests.forEach(function (p) {
    var actual = path.win32.join.apply(null, p[0]);
    t.strictEqual(actual, p[1]);
  });
  t.end();
});
